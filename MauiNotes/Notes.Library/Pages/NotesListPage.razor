@page "/"
@page "/NotesList/{Type}"
@inject INotesService _notesService
@inject INoteReader _noteReader
@inject IJSRuntime _JsRuntime
@inject IGlobalNavigation _globalNavigation

<ion-header>
    <ion-toolbar color="primary">
        <ion-buttons slot="start">
            <ion-menu-button></ion-menu-button>
        </ion-buttons>
        <ion-title>Notes List</ion-title>
    </ion-toolbar>
</ion-header>
<ion-grid fixed="true">
    <ion-row size="auto">
        <ion-col>
            <ion-label>Notes List</ion-label>
        </ion-col>
    </ion-row>
    <ion-row size="auto">
        <ion-col>
            <ion-label>Type: @Type</ion-label>
        </ion-col>
    </ion-row>
    <ion-row>
        <ion-col>
            <ion-list lines="none">
                @foreach (var item in _notes)
                {
                    <ion-item class="ion-align-items-center">
                        <ion-label class="ion-text-wrap" @onclick="() => Edit_Note(item.NoteId)">@item.NoteText</ion-label>
                        <ion-button fill="clear" @onclick="() => Read_Text(item.NoteText)">Read Text</ion-button>
                        <ion-icon slot="end" name="trash-outline" @onclick="() => DeleteNote(item)"></ion-icon>
                    </ion-item>
                }
            </ion-list>
        </ion-col>
    </ion-row>
</ion-grid>

@code {
    [Parameter]
    public string Type { get; set; }

    private List<Note> _notes = new List<Note>();

    protected override async void OnParametersSet()
    {
        base.OnParametersSet();

        if (Type == null)
        {
            Type = "Personal";
        }
        _notes = await _notesService.GetNotes(Enum.Parse<NoteType>(Type));
    }

    async void Read_Text(string noteText)
    {
        await _noteReader.ReadNote(noteText);
    }

    async Task DeleteNote(Note note)
    {
        var response = await _JsRuntime.InvokeAsync<string>("presentConfirm", "Delete", "Do you want to delete this note?", "Yes", "No");
        if (response == "confirm")
        {
            await _notesService.DeleteNote(note);
            _notes = await _notesService.GetNotes(Enum.Parse<NoteType>(Type));
        }
    }

    async Task Add_Note()
    {
        await _globalNavigation.NavigateTo("/EditNote/-1");
    }

    async Task Edit_Note(int noteId)
    {
        await _globalNavigation.NavigateTo($"/EditNote/{noteId}");
    }
}
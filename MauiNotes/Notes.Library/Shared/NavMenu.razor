@using System.Net.Http.Headers;
@using CommunityToolkit.Mvvm.Messaging;
@using Newtonsoft.Json;
@inject IGlobalNavigation _GlobalNavigation
@inject IPlatformHelper _PlatformHelper
@inject ILoginService _LoginService

<ion-menu content-id="main-content">
    <ion-grid fixed="true" style="display: flex; flex-flow: column;">
        <ion-row size="auto">
        @foreach (var item in _menuItems)
        {
        <ion-item lines="none" color="@item.Color">
            <ion-menu-toggle>
                <ion-label @onclick="() => NavigateToURI(item.Uri)">@item.Caption</ion-label>
            </ion-menu-toggle>
        </ion-item>
        }
    </ion-row>
        <ion-row style="flex-grow: 1" class="ion-justify-content-left ion-align-items-end">
            <ion-label>@_userName</ion-label>
        </ion-row>
    </ion-grid>
</ion-menu>

@code {
    string _userName = "Fetching...";

    class MenuItem
    {
        public string Caption { get; set; }
        public string Uri { get; set; }
        public string Color { get; set; }
    }

    private List<MenuItem> _menuItems;

    private readonly string SERVICE_URI = "https://localhost:7141/User";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WeakReferenceMessenger.Default.Register<LoginStateChangedMessage>(this, async (r, m) =>
        {
            _userName = await GetUserName();
            this.StateHasChanged();
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _menuItems = new List<MenuItem>
        {
            new MenuItem
            {
                Caption = "Notes List - Personal",
                Uri = "/",
                Color = "light"
            },
            new MenuItem
            {
                Caption = "Notes List - Business",
                Uri = "/NotesList/Business",
                Color = "default"
            },
        };

        _userName = await GetUserName();
    }

    void NavigateToURI(string uri)
    {
        _GlobalNavigation.NavigateTo(uri);
        foreach (var oMenuItem in _menuItems)
        {
            oMenuItem.Color = uri == oMenuItem.Uri ? "light" : "default";
        }
    }

    async Task<string> GetUserName()
    {
        string returnValue = "Unavailable";

        if (await _PlatformHelper.IsOnline() &&
            await _LoginService.IsAuthenticated())
        {
            HttpResponseMessage response = null;

            using (HttpClient client = new HttpClient())
            {
                var contentType = new MediaTypeWithQualityHeaderValue("application/json");

                client.DefaultRequestHeaders.Accept.Add(contentType);
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _LoginService.CurrentToken());
                response = await client.GetAsync(SERVICE_URI);

                if (response.IsSuccessStatusCode)
                {
                    string responseContent = await response.Content.ReadAsStringAsync();
                    if (!string.IsNullOrEmpty(responseContent))
                    {
                        var user = JsonConvert.DeserializeObject<UserInformation>(responseContent);

                        if (user != null)
                        {
                            returnValue = $"{user.FirstName} {user.LastName}";
                        }
                    }
                }
            }
        }

        return returnValue;
    }
}
